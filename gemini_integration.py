"""
Gemini API Integration for Intelligent Task Generation
Uses Google's Gemini API to enhance task proposals with AI
"""

import json
import requests
from typing import List, Dict, Any, Optional
import config


class GeminiTaskEnhancer:
    """
    Uses Gemini API to enhance task generation with AI intelligence.
    """
    
    def __init__(self):
        """Initialize the Gemini task enhancer."""
        self.api_key = config.GEMINI_API_KEY
        self.model = config.GEMINI_MODEL
        self.api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.model}:generateContent"
        self.enabled = config.is_gemini_enabled()
        
        print(f"\n{'='*80}")
        print("GEMINI API INTEGRATION")
        print(f"{'='*80}")
        if self.enabled:
            print(f"✓ Gemini API enabled")
            print(f"  Model: {self.model}")
            print(f"  Temperature: {config.GEMINI_TEMPERATURE}")
        else:
            print(f"✗ Gemini API disabled (no API key)")
            print(f"  Using rule-based task generation")
        print(f"{'='*80}\n")
    
    def enhance_task_proposals(self, team_name: str, team_expertise: List[str], 
                               incident_description: str, 
                               base_tasks: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Use Gemini to enhance or generate additional task proposals.
        
        Args:
            team_name: Name of the team
            team_expertise: List of team's expertise areas
            incident_description: Description of the incident
            base_tasks: Tasks already generated by rule-based system
            
        Returns:
            Enhanced or additional tasks
        """
        if not self.enabled:
            print(f"  [Gemini] Skipping enhancement (API not configured)")
            return base_tasks
        
        print(f"\n{'─'*80}")
        print(f"[Gemini] Enhancing tasks for {team_name}")
        print(f"{'─'*80}")
        print(f"  Incident: {incident_description[:60]}...")
        print(f"  Team Expertise: {', '.join(team_expertise)}")
        print(f"  Base Tasks: {len(base_tasks)}")
        
        try:
            # Generate additional task suggestions
            additional_tasks = self._generate_additional_tasks(
                team_name, team_expertise, incident_description, base_tasks
            )
            
            if additional_tasks:
                print(f"  ✓ Generated {len(additional_tasks)} additional tasks via Gemini")
                return base_tasks + additional_tasks
            else:
                print(f"  → No additional tasks suggested")
                return base_tasks
                
        except Exception as e:
            print(f"  ✗ Gemini API error: {str(e)}")
            print(f"  → Falling back to base tasks")
            return base_tasks
    
    def _generate_additional_tasks(self, team_name: str, team_expertise: List[str],
                                   incident_description: str,
                                   base_tasks: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Generate additional tasks using Gemini API."""
        
        # Create prompt for Gemini
        prompt = self._create_task_generation_prompt(
            team_name, team_expertise, incident_description, base_tasks
        )
        
        print(f"  [Gemini] Sending request to API...")
        
        # Call Gemini API
        response = self._call_gemini_api(prompt)
        
        if not response:
            return []
        
        print(f"  [Gemini] Received response, parsing tasks...")
        
        # Parse response into tasks
        additional_tasks = self._parse_gemini_response(response, team_name)
        
        return additional_tasks
    
    def _create_task_generation_prompt(self, team_name: str, team_expertise: List[str],
                                       incident_description: str,
                                       base_tasks: List[Dict[str, Any]]) -> str:
        """Create a prompt for Gemini to generate tasks."""
        
        base_task_descriptions = [f"- {task['description']}" for task in base_tasks]
        base_tasks_text = "\n".join(base_task_descriptions) if base_tasks else "None yet"
        
        prompt = f"""You are an expert incident response coordinator. 

INCIDENT: {incident_description}

TEAM: {team_name}
EXPERTISE: {', '.join(team_expertise)}

TASKS ALREADY PROPOSED:
{base_tasks_text}

Based on this team's expertise and the incident, suggest 1-3 ADDITIONAL high-value tasks this team could perform to help resolve the incident. 

For each task, provide:
1. A clear, actionable description (one sentence)
2. Importance score (1-10, where 10 is critical)
3. Estimated hours to complete
4. Brief justification

Format your response as JSON array:
[
  {{
    "description": "Task description",
    "importance": 8,
    "estimated_hours": 3,
    "justification": "Why this task is important"
  }}
]

Only suggest tasks that are:
- Directly relevant to the incident
- Within this team's expertise
- Not duplicates of existing tasks
- Actionable and specific

If no additional tasks are needed, return an empty array: []
"""
        
        return prompt
    
    def _call_gemini_api(self, prompt: str) -> Optional[str]:
        """Call the Gemini API with the given prompt."""
        
        headers = {
            'Content-Type': 'application/json',
        }
        
        payload = {
            'contents': [{
                'parts': [{
                    'text': prompt
                }]
            }],
            'generationConfig': {
                'temperature': config.GEMINI_TEMPERATURE,
                'maxOutputTokens': config.GEMINI_MAX_TOKENS,
            }
        }
        
        try:
            url = f"{self.api_url}?key={self.api_key}"
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            
            print(f"  [Gemini] API Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                if 'candidates' in data and len(data['candidates']) > 0:
                    text = data['candidates'][0]['content']['parts'][0]['text']
                    print(f"  [Gemini] Response length: {len(text)} characters")
                    return text
                else:
                    print(f"  [Gemini] No candidates in response")
                    return None
            else:
                print(f"  [Gemini] API Error: {response.text}")
                return None
                
        except requests.exceptions.Timeout:
            print(f"  [Gemini] Request timeout after 30 seconds")
            return None
        except Exception as e:
            print(f"  [Gemini] Exception: {str(e)}")
            return None
    
    def _parse_gemini_response(self, response_text: str, team_name: str) -> List[Dict[str, Any]]:
        """Parse Gemini's response into task objects."""
        
        print(f"  [Gemini] Parsing response...")
        
        try:
            # Extract JSON from response (might be wrapped in markdown code blocks)
            json_text = response_text.strip()
            
            # Remove markdown code blocks if present
            if json_text.startswith('```'):
                lines = json_text.split('\n')
                json_text = '\n'.join(lines[1:-1])
            
            # Parse JSON
            gemini_tasks = json.loads(json_text)
            
            if not isinstance(gemini_tasks, list):
                print(f"  [Gemini] Response is not a list, skipping")
                return []
            
            print(f"  [Gemini] Parsed {len(gemini_tasks)} tasks from response")
            
            # Convert to our task format
            tasks = []
            for i, gemini_task in enumerate(gemini_tasks, 1):
                task = {
                    'task_id': f"{team_name.replace(' ', '_')}_GEMINI_{i:02d}",
                    'description': gemini_task.get('description', 'AI-suggested task'),
                    'importance': gemini_task.get('importance', 5),
                    'estimated_hours': gemini_task.get('estimated_hours', 2),
                    'tentative_deadline': None,  # Will be set by caller
                    'assigned_to': 'TBD',
                    'dependencies': [],
                    'source': 'gemini',
                    'justification': gemini_task.get('justification', '')
                }
                tasks.append(task)
                
                print(f"    • Task {i}: {task['description'][:50]}... (Priority: {task['importance']})")
            
            return tasks
            
        except json.JSONDecodeError as e:
            print(f"  [Gemini] JSON parse error: {str(e)}")
            print(f"  [Gemini] Response text: {response_text[:200]}...")
            return []
        except Exception as e:
            print(f"  [Gemini] Parse error: {str(e)}")
            return []
    
    def analyze_incident_severity(self, incident_description: str) -> Dict[str, Any]:
        """
        Use Gemini to analyze incident severity and impact.
        
        Args:
            incident_description: Description of the incident
            
        Returns:
            Analysis results
        """
        if not self.enabled:
            return {
                'severity': 'medium',
                'impact': 'unknown',
                'analysis': 'Gemini API not configured'
            }
        
        print(f"\n{'─'*80}")
        print(f"[Gemini] Analyzing incident severity")
        print(f"{'─'*80}")
        
        prompt = f"""Analyze this incident and provide:
1. Severity level (low/medium/high/critical)
2. Potential impact areas
3. Recommended response urgency

INCIDENT: {incident_description}

Respond in JSON format:
{{
  "severity": "high",
  "impact_areas": ["area1", "area2"],
  "urgency": "immediate",
  "reasoning": "Brief explanation"
}}
"""
        
        try:
            response = self._call_gemini_api(prompt)
            if response:
                # Parse response
                json_text = response.strip()
                if json_text.startswith('```'):
                    lines = json_text.split('\n')
                    json_text = '\n'.join(lines[1:-1])
                
                analysis = json.loads(json_text)
                print(f"  ✓ Severity: {analysis.get('severity', 'unknown')}")
                print(f"  ✓ Impact: {', '.join(analysis.get('impact_areas', []))}")
                return analysis
        except Exception as e:
            print(f"  ✗ Analysis error: {str(e)}")
        
        return {
            'severity': 'medium',
            'impact': 'unknown',
            'analysis': 'Analysis failed'
        }


# Global instance
_gemini_enhancer = None

def get_gemini_enhancer() -> GeminiTaskEnhancer:
    """Get or create the global Gemini enhancer instance."""
    global _gemini_enhancer
    if _gemini_enhancer is None:
        _gemini_enhancer = GeminiTaskEnhancer()
    return _gemini_enhancer
